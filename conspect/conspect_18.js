'use strict';

// * Модульная структура
console.log('Модульная структура');


// 1) Start Code
console.log(`____________________________________________________________________________________

`);

// * 1) Метод Инкапсуляции
// Это сложение данных и функций в один компонент, например функция, класс, объект и т.д. Допустим в каждом отдельном файле создаётся фунеция отвечающая за что-то одно.
console.log('1) Метод Инкапсуляции');

// * 1-1) Пример без Инкапсуляции
// При подключении нескольких файлов переменная slider может быть и в них, что приведёт к ошибке
console.log('\n \n 1-1) Пример без Инкапсуляции');

const slider = '\n \n 1-1) Slider - Пример без Инкапсуляции';
console.log(slider);


// * 1-2) Инкапсуляции - Пример с использованием функции и её области видимости
// Создаём переменную внутри которой создаём удобные название переменных и используем область видимости фунеции, далее её вызываем
// - что название самой функии тоже может повторяться в других подключенных файлах вроде сторонних библиотек, что тоже приведёт к ошибке
console.log('\n \n 1-2) Инкапсуляции - Пример с использованием функции и её области видимости');

// * Обычная анонимная функция внутри переменной
const sliderFunction_1 = () => {
    const slider = '\n \n 1-2) Slider - Обычная анонимная функция внутри переменной';
    console.log(slider);
};

sliderFunction_1();

// * 1-3) Анонимная самовызывающиеся функция - Пример Инкапсуляции
// Это функция, которая вызвается в момент её написания
// Для того, чтобы из обычной функции сделать анонимную самовызывающиеся функцию, мы должны обычную функции взять в круглые скобки () и далее добавить её же вызов через ()
console.log('\n \n 1-3) Анонимная самовызывающиеся функция');

(function () {
    const slider = '1-3-1) Slider - Анонимная самовызывающиеся функция';
    console.log(slider);
})();

// * Такую функцию можно написать в виде =>
// (() => {
//    тело фукции
// })
(() => {
    const slider = '1-3-2) Slider - Анонимная самовызывающиеся стрелочкая функция =>';
    console.log(slider);
})();




// * 2) Модуль - Модульный подход
// Модуль это законченный и абсолютно независимый функциональный блок
console.log('\n \n 2) Модуль - Модульный подход');

// Инкапсуляция кода
const sliderModule = () => {
    const slider = 'Slider';

    console.log(slider);
};

// * 2-1) module.exports команда
// Таким образом мы экспортируем данную функцию sliderModule из файла, где находится эта функция
// module.exports = sliderModule; // ПРИМЕР
console.log('\n \n 2-1) module.exports команда');


// * 2-2) require() - Создаём переменные, в которые поместим функции
// Внутри require() в виде строки '' передаём путь к нашему модулю. Расширение формата .js писать необязательно.
// const slider = require('./modules/slider');  // ПРИМЕР
console.log('\n \n 2-2) require() - Создаём переменные, в которые поместим функции');


// * 2-3) Browserify - Один из инструментов сборки проекта. Но по факту используют webpack
// https://browserify.org/
// npm install -g browserify
// Флажочек -g означает, что данная библиотека установится на ПК глобально

// browserify main.js -o bundle.js
// Где main.js это название файла точки входа, унас это src/index.js
// Где bundle.js это название файла, который создаст инструмент browserify, у нас это будет dist/bundle.js

// browserify src/index.js -o dist/bundle.js     // Так выглядит финальная запись
// Далее в index.html мы должны подключить итоговый файл dist/bundle.js
console.log('\n \n 2-3) Browserify - Один из инструментов сборки проекта. Но по факту используют webpack');




// * 3) Webpack - инструмент сборки проекта
// https://webpack.js.org/
console.log('\n \n 3) Webpack - инструмент сборки проекта');





// * 3-1) Webpack - Установка
console.log('\n \n 3-1) Webpack - Установка');
// mkdir webpack-demo    // Создаёт папку
// cd webpack-demo       // Переходит в папку

// npm init               // -y не указываем
//










// 1) End Code
console.log(`____________________________________________________________________________________

`);