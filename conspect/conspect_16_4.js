'use strict';

// * Особенности современного стандарта ES6 - ECMAScript 6
// На самом деле комитет выпускает стандарт каждый год, но ES6 привнёс в язык наибольшее количество глобальных нововведений, о самых важных мы поговорим и рассмотрим
console.log('Особенности современного стандарта ES6 - ECMAScript 6');


// 1) Start Code
console.log(`____________________________________________________________________________________

`);


// * 4) Операторы Rest и Spread
// Их ещё называют остаточные параметры и оператор расширения
console.log('4) Операторы Rest и Spread');


// * 4-1) Rest - статочные параметры
// После последнего параметра функции ставится запятая, троеточие и указывается имя параметров , ... mame, чтобы далее по этому имени мы могли достучаться до остаточных параметров
// В итоге мы получаем массив из всех параметров, которые не перечислены до остаточных параметров
console.log(`\n \n 4-1) Rest - статочные параметры`);

const sum_1 = (a, b, c, ...params) => {
    console.log(a);
    console.log(b);
    console.log(c);
    console.log(params);
};

// Как мы знаем, функция игнорирует аргументы, которые выходят за рамки заданных в функции (4 и 5). Но что если нам нужен функционал, который примит все оставшиеся аргументы вроде 4 и 5, чтобы мы потом могли их использовать в коде
sum_1(1, 2, 3, 4, 5, 'args', true);



// Мы можем указывать любое количество остаточных параметров. Так как мы получаем массив, то мы можем его перебрать и допустим сложить все числа. Теперь нам без разницы сколько аргументов мы будем передавать, все они будут суммироваться
const sum_2 = (...params) => {
    console.log(params);

    return params.reduce((sum, num) => sum + num);
};

console.log(sum_2(2, 5, 555));




// * 4-1) Spread - оператор расширения
// Данный оператор позволяет быстро и легко соединять разные массивы
console.log(`\n \n 4-2) Spread - оператор расширения`);

// Чтобы собрать из этих массивов новый массив нам нужно либо создать новый массив и перебрав каждый из двух запушить в новый массив каждый элемент, либо перебрать один из двух массивов и запуштить во второй все элементы.
// * Но есть вариант проще!
const firstArray = [1, 2, 3, 4, 5];
const secondArray = [6, 7, 8, 9, 10];

// + мы можем добавлять в любое место дополнительные элементы
console.log([22, ...firstArray, 555, 525, ...secondArray]);

// Создано для теста и практики
const allArrays = [...firstArray, ...secondArray];
console.log(allArrays);